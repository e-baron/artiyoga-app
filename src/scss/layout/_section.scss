.section {
  @include regular-text();

  display: flex;
  //flex-direction: row;
  // should your items be too large to all display in one line, they will wrap onto another line
  //flex-wrap: wrap;
  // this is the equivalent of the above given

  flex-flow: row wrap;

  width: 100%;
  min-height: 10px;

  &--news-index .section__content {
    padding-bottom: 0.5rem;
    @media only screen and (min-width: $lg) {
      max-width: 50%;
      &:nth-child(2n-1) {
        padding-right: 1rem;
      }
    }
  }

  &--auto-margin .section__content {
    position: relative; // In order for the component image to be responsive
    padding-top: 1rem;
    padding-left: 1rem;
    padding-right: 1rem;
    ul,
    ol {
      padding-left: 1.3rem;
      padding-right: 1.3rem;
      margin-bottom: 1rem;
      line-height: 1.5;
    }
  }

  &--no-auto-margin {
    padding-top: 0rem;
    padding-left: 0rem;
    padding-right: 0rem;
  }

  &__content {
    // The flex shorthand allows you to set the three values in this order â€” flex-grow, flex-shrink, flex-basis
    // With the flex-grow property set to a positive integer, flex items can grow along the main axis from their flex-basis. This will cause the item to stretch and take up any available space on that axis, or a proportion of the available space if other items are allowed to grow too.
    flex: 1 1 100%;

    flex-wrap: wrap;

    //in a flex container, where you have box-sizing: border-box, and the width or flex-basis is used to calculate length, the boxes will render evenly regardless of padding.
    box-sizing: border-box;
    position: relative;
    overflow: hidden; // In order for the component image to be responsive (and remove padding

    &--auto-margin {
      padding-top: 1rem;
      padding-left: 1rem;
      padding-right: 1rem;
      ul,
      ol {
        padding-left: 1.3rem;
        padding-right: 1.3rem;
        margin-bottom: 1rem;
        line-height: 1.5;
      }
    }

    &--no-auto-margin {
      padding-top: 0rem;
      padding-left: 0rem;
      padding-right: 0rem;
    }

    &--center {
      justify-content: center;
      text-align: center;
    }

    @media only screen and (min-width: $lg) {
      flex-basis: 50%;
    }

    /*
    &--no-grow-for-single-content {
      @media only screen and (min-width: $lg) {
        max-width: 50%;
      }
    }*/
  }

  /* Section's elements */

  &__header {
    flex: 1 1 100%;
    min-height: 10px; //5vh;
    text-align: center;
    align-self: flex-start;
    padding-left: 1rem;
    padding-right: 1rem;
    position: absolute;
    padding: 0 auto;
    width: 100%;
    @include emphasized-text();

    &--left {
      text-align: left;
      padding-left: 1rem;
    }
  }

  &__footer {
    flex: 1 1 100%;
    // display: block;
    // min-height: 5vh;
    text-align: center;
    align-self: flex-end;
    justify-content: center;
    padding-left: 1rem;
    padding-right: 1rem;
    position: absolute;
    // padding: 0 auto;
    width: 100%;
    // padding-bottom: 1rem;
    font-family: $font-navigation;
    font-size: 1.5rem;
    font-weight: 300;

    // deal with style only if there is sibling .footer element (only OK if there is maximum 2 .footer elemen
    &:nth-last-of-type(2) {
      bottom: 2rem;
    }

    // deal with style for a sibling .footer element
    & + & {
      position: relative;
      top: 1rem;
    }
  }

  // align a section text vertically in the center
  &__middle-title {
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    align-items: center;
    align-content: center;
    height: 100%;
    width: 100%;
    position: absolute;
  }

  /* Deal with background elements within a section or within a : note that this is normally not necessary
  to use it if .background is used instead of .section_background */

  &__background {
    display: flex;
    flex-flow: row wrap;

    width: 100%;
    min-height: 10px;

    background-size: cover;
    //z-index: 1;
  }

  // Deal with hyperlinks in a section
  a {
    color: $tertiary-color;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,
      border-color 0.15s ease-in-out;

    cursor: pointer;
    &:hover,
    &:focus {
      color: lighten($tertiary-color, 20%);
    }
  }

  /* Deal with section modifiers */
}
